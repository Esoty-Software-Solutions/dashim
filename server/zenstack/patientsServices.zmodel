import 'base'
import 'medicalCenter';
import 'verification'
import 'policy'

model TimeWindow extends Base, ActivationStatus {
  medicalCenter MedicalCenter @relation(fields: [medicalCenterId], references: [id])
  medicalCenterId String @unique
  time Int @default(24)
}

model EntryRecord extends Base, ActivationStatus {
  subscriberGroup SubscriberGroup @relation(fields: [subscriberGroupId], references: [id])
  subscriberGroupId String

  fingerprintBiometric Fingerprint? @relation(fields: [fingerprintId], references: [id])
  fingerprintId String?

  idCard IDCard? @relation(fields: [idCardId], references: [id])
  idCardId String?

  face Face? @relation(fields: [faceId], references: [id])
  faceId String?

  voice Voice? @relation(fields: [voiceId], references: [id])
  voiceId String?

  isValidated Boolean
  isManuallyInserted Boolean @default(false)

  patientServices PatientService[]
  patientExamination PatientExamination?

  medicalCenterId String
  medicalCenter MedicalCenter @relation(fields: [medicalCenterId], references: [id])
}

model PatientService extends Base, ActivationStatus {
  entryRecord EntryRecord @relation(fields: [entryRecordId], references: [id])
  entryRecordId String

  Note String?

  isWorkInjury Boolean @default(false)

  name String
  cash Int // تخزين القيمة التي دفعها المستفيد, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة
  limit Int // تخزين قيمة التي التغطية, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة
  deffered Int // تخزين القيمة التي دفعتها المؤسسة, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة //

  transactionReviewStatus ReviewStatus @relation("transactionReviewStatus", fields: [transactionReviewStatusId], references: [id])
  transactionReviewStatusId String

  medicalReviewStatus ReviewStatus @relation("medicalReviewStatus",  fields: [medicalReviewStatusId], references: [id])
  medicalReviewStatusId String

  patientExamination PatientExamination @relation(fields: [patientExaminationId], references: [id])
  patientExaminationId String

  serviceId String
  service PackageMedicalServices @relation(fields: [serviceId], references: [id])

  groupId String
}

model PatientExamination extends Base, ActivationStatus {
  entryRecord EntryRecord @relation(fields: [entryRecordId], references: [id])
  entryRecordId String @unique

  Note String?

  isWorkInjury Boolean @default(false)

  name String
  cash Int // تخزين القيمة التي دفعها المستفيد, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة
  limit Int // تخزين قيمة التي التغطية, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة
  deffered Int // تخزين القيمة التي دفعتها المؤسسة, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة //

  transactionReviewStatus ReviewStatus @relation("transactionReviewStatus", fields: [transactionReviewStatusId], references: [id])
  transactionReviewStatusId String

  medicalReviewStatus ReviewStatus @relation("medicalReviewStatus",  fields: [medicalReviewStatusId], references: [id])
  medicalReviewStatusId String

  patientServices PatientService[]

  serviceId String
  service PackageMedicalServices @relation(fields: [serviceId], references: [id])

  groupId String
}

model ReviewStatus extends Base, LangLocale {
  name String @unique
  transactionPatientServices PatientService[] @relation("transactionReviewStatus")
  medicalPatientServices PatientService[] @relation("medicalReviewStatus")

  transactionPatientExamination PatientExamination[] @relation("transactionReviewStatus")
  medicalPatientExamination PatientExamination[] @relation("medicalReviewStatus")
}

model SubscriberGroupBalance extends Base {
  subscriberGroupId String
  subscriberGroup SubscriberGroup @relation(fields: [subscriberGroupId], references: [id])

  beneftiPackageId String
  beneftiPackage BenefitPackage @relation(fields: [beneftiPackageId], references: [id])

  balance Float
}