import 'base'
import 'medicalCenter';
import 'verification'
import 'policy'

model EntryRecord extends Base, ActivationStatus {
  beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String

  fingerprintBiometric Fingerprint? @relation(fields: [fingerprintId], references: [id])
  fingerprintId String?

  idCard IDCard? @relation(fields: [idCardId], references: [id])
  idCardId String?

  face Face? @relation(fields: [faceId], references: [id])
  faceId String?

  voice Voice? @relation(fields: [voiceId], references: [id])
  voiceId String?

  isValidated Boolean
  isManuallyInserted Boolean @default(false)

  patientServices PatientService[]

  medicalCenterId String
  medicalCenter MedicalCenter @relation(fields: [medicalCenterId], references: [id])
}

// abstract model ServiceRecord {
//   isActive Boolean @default(true)
//   deactivationReason String?
// }

model PatientService extends Base, ActivationStatus {
  entryRecord EntryRecord @relation(fields: [entryRecordId], references: [id])
  entryRecordId String

  Note String?

  isWorkInjury Boolean @default(false)

  isExamination Boolean @default(false) // is this service is examination or not

  name String
  cash Int // تخزين القيمة التي دفعها المستفيد, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة
  limit Int // تخزين قيمة التي التغطية, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة
  deffered Int // تخزين القيمة التي دفعتها المؤسسة, يتم حفظها هنا في حال تم تغيير نسبة تغطية الخدمة //

  transactionReviewStatus ReviewStatus @relation("transactionReviewStatus", fields: [transactionReviewStatusId], references: [id])
  transactionReviewStatusId String

  medicalReviewStatus ReviewStatus @relation("medicalReviewStatus", fields: [medicalReviewStatusId], references: [id])
  medicalReviewStatusId String

  service PackageMedicalServices @relation(fields: [serviceId], references: [id])
  serviceId String

  groupCode String //used to group services in the same group
}

model ReviewStatus extends Base, LangLocale {
  name String @unique
  transactionPatientServices PatientService[] @relation("transactionReviewStatus")
  medicalPatientServices PatientService[] @relation("medicalReviewStatus")
}

model BeneficiaryBalance extends Base {
  beneficiaryId String
  beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])

  beneftiPackageId String
  beneftiPackage BenefitPackage @relation(fields: [beneftiPackageId], references: [id])

  balance Float
}

model DiagnosisAttachment extends Base, Attachment {
}

model LabReportAttachment extends Base {
}

model PrescriptionAttachment extends Base {
}