import 'base'
import 'verification'
import 'policy'
import 'patientService'


model Institution extends Base, ActivationStatus {
  name String
  code String @unique
  legacyCode String?
  description String?
  cityHQ String?
  address String?
  phoneArray String[] @unique
  emailArray String[] @unique
  // TODO: Normalize the phone and email array
  // TODO: Normalize links
  website String @url
  facebookLink String @url
  googleMapsLink String @url
  twitterLink String @url
  instagramLink String @url

  latitude Float?
  longitude Float?

  // managingTenant Tenant @relation(fields: [managingTenantId], references: [id])
  // managingTenantId String @unique

  policies InsurancePolicy[]
  // members BeneficiaryEntity[]
  MedicalCenterPricing InstitutionMedicalService[]
}

model BeneficiaryEntity extends Base, ActivationStatusWithUser {
  // institution Institution @relation(fields: [institutionId], references: [id])
  // institutionId String

  insurancePolicy InsurancePolicy @relation(fields: [insurancePolicyId], references: [id])
  insurancePolicyId String

  beneficiaries Beneficiary[]

  futureStatus BeneficiaryEntityFutureStatusChange[]

  @@index([insurancePolicyId, id])
  // @@unique([insurancePolicyId, id]) // Unnecessary because id is unique
}

model BeneficiaryEntityFutureStatusChange extends BaseWithUser {
  changeDate DateTime
  futureStatus Boolean
  description String?

  // document link to document that triggered the change

  beneficiaryEntity BeneficiaryEntity @relation(fields: [beneficiaryEntityId], references: [id])
  beneficiaryEntityId String @unique

  @@index([beneficiaryEntityId, id])
  @@unique([beneficiaryEntityId, changeDate])
}

model Beneficiary extends Base, HumanProfile, ActivationStatusWithUser {
  beneficiaryEntity BeneficiaryEntity @relation(fields: [beneficiaryEntityId], references: [id])
  beneficiaryEntityId String
  legacyCode String?

  relationship Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId String

  isFingerprintVerificationActive Boolean @default(false)
  isIdCardVerificationActive Boolean @default(false)
  isFaceVerificationActive Boolean @default(false)
  isVoiceVerificationActive Boolean @default(false)

  fingerprint FingerprintBiometric []
  idCard IDCard[]
  face FaceBiometric[]
  voice VoiceBiometric[]
  entryRecords EntryRecord[]
  beneficiaryBalances BeneficiaryBalance[]

  futureStatus BeneficiaryFutureStatusChange[]

  @@index([beneficiaryEntityId, id])
  @@unique([beneficiaryEntityId, id])
}

model BeneficiaryFutureStatusChange extends BaseWithUser {
  changeDate DateTime
  futureStatus Boolean
  description String?
  
  // document link to document that triggered the change

  beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String

  @@index([beneficiaryId, id])
  @@unique([beneficiaryId, changeDate])
}


model Relationship extends Base, LangLocale {
  name String @unique
  beneficiary Beneficiary[]
}

// enum Relationship {
//     SELF
//     FATHER
//     MOTHER
//     SON
//     DAUGHTER
//     BROTHER
//     SISTER
//     UNCLE
//     AUNT
//     GRANDFATHER
//     GRANDMOTHER
//     COUSIN
//     NEPHEW
//     NIECE
//     FRIEND
//     OTHER
// }

model InstitutionMedicalService extends Base, ActivationStatus {
  institution Institution @relation(fields: [institutionId], references: [id])
  institutionId String

  medicalService MedicalService @relation(fields: [medicalServiceId], references: [id])
  medicalServiceId String

  basePrice Int

  @@index([institutionId, medicalServiceId])
  @@unique([institutionId, medicalServiceId])
}
