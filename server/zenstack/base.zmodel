import 'user'

abstract model Base {
  id String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  isPublished Boolean @default(true)
  isSoftDeleted Boolean @default(false)

  // author has full access
  // @@allow('all', auth() != null && published)
  @@allow('all', true && isPublished)
}

abstract model BaseWithUser {
  id String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  isPublished Boolean @default(true)
  isSoftDeleted Boolean @default(false)

  CreatedBy User @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String

  UpdatedBy User? @relation("UpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  // author has full access
  // @@allow('all', auth() != null && published)
  @@allow('all', true && isPublished)
}

abstract model ActivationStatus {
  isActive Boolean @default(true)
  deactivationReason String?
  deactivationDate DateTime?
}

abstract model ActivationStatusWithUser {
  isActive Boolean @default(true)
  deactivationReason String?
  deactivationDate DateTime?

  StatusSetBy User @relation("StatusSetBy", fields: [statusSetById], references: [id])
  statusSetById String
}

abstract model HumanProfile {
  firstName String
  secondName String?
  thirdName String?
  fourthName String?
  lastName String
  searchName String

  birthDate DateTime

  gender GenderEnum @relation(fields: [genderId], references: [id])
  genderId String

  nationality String?
  nationalID String?
}

abstract model LangLocale {
  arabic String?
  english String?
}

// abstract model Contact {
//   email String?
//   phone String?
//   mobile String?
//   fax String?
//   website String?
//   address String?
//   postalCode String?
// }

abstract model location {
  city CityEnum @relation(fields: [cityId], references: [id])
  cityId String

  address String?
}

abstract model Attachment {
  name String
  link String // holds s3 secret link
  size Int // in bytes
  contentType String
  metadata Json
}


