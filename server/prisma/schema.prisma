//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider = "prisma-erd-generator"
    theme = "forest"
    output = "./ERD.svg"
}

generator fakeData {
    provider = "prisma-generator-fake-data"
    output = "./fakeData/functions.ts"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

generator trpc {
    provider = "prisma-trpc-generator"
    withZod = true
    withMiddleware = false
    withShield = false
    contextPath = "../src/routers/_context.router"
    trpcOptionsPath = "trpcOptions"
}

/// @@allow('all', true && isPublished)
model Gender {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    user User[]
    beneficiary Beneficiary[]
}

/// @@allow('all', true && isPublished)
model Currency {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    code String @unique()
    symbol String
    BuyexchangeRate Float @default(1)
    SellExchangeRate Float @default(1)
}

/// @@allow('all', true && isPublished)
model City {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    country Country @relation(fields: [countryId], references: [id])
    countryId String
}

/// @@allow('all', true && isPublished)
model Country {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    code String @unique()
    cities City[]
}

/// @@allow('all', true && isPublished)
model User {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    firstName String
    secondName String?
    thirdName String?
    fourthName String?
    lastName String
    searchName String
    birthDate DateTime
    gender Gender @relation(fields: [genderId], references: [id])
    genderId String
    nationality String?
    nationalID String?
    residence String?
    address String?
    username String @unique()
    /// @email
    email String @unique()
    isEmailVerificationActive Boolean @default(false)
    phone String?
    isPhoneVerified Boolean @default(false)
    /// @omit
    passwordHash String
    deviceToken DeviceToken[]
    avatar String?
    ownerOf Tenant[]
    memberOf TenantMembers[]
}

/// @@allow('all', true && isPublished)
model TenantMembers {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    tenant Tenant @relation(fields: [tenantId], references: [id])
    tenantId String
    member User @relation(fields: [memberId], references: [id])
    memberId String

    @@index([tenantId, id])
    @@unique([memberId, id])
}

/// @@allow('all', true && isPublished)
model Tenant {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String
    type TenantType @relation(fields: [typeId], references: [id])
    typeId String
    description String?
    logo String?
    website String?
    phone String?
    email String?
    address String?
    city String?
    country String?
    assignedToMedicalCenter MedicalCenter?
    owner User @relation(fields: [ownerId], references: [id])
    ownerId String
    members TenantMembers[]
}

/// @@allow('all', true && isPublished)
model DeviceToken {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String
    deviceType DeviceType @relation(fields: [deviceTypeId], references: [id])
    deviceTypeId String
    user User @relation(fields: [userId], references: [id])
    userId String

    @@index([userId, name])
    @@unique([userId, name])
}

/// @@allow('all', true && isPublished)
model TenantType {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    tenant Tenant[]
}

/// @@allow('all', true && isPublished)
model Role {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
}

/// @@allow('all', true && isPublished)
model DeviceType {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    deviceToken DeviceToken[]
}

/// @@allow('all', true && isPublished)
model Institution {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String
    code String @unique()
    legacyCode String?
    description String?
    cityHQ String?
    address String?
    phoneArray String[] @unique()
    emailArray String[] @unique()
    /// @url
    website String
    /// @url
    facebookLink String
    /// @url
    googleMapsLink String
    /// @url
    twitterLink String
    /// @url
    instagramLink String
    latitude Float?
    longitude Float?
    policies InsurancePolicy[]
    members Subscriber[]
    MedicalCenterPricing InstitutionMedicalService[]
}

/// @@allow('all', true && isPublished)
model Subscriber {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    institution Institution @relation(fields: [institutionId], references: [id])
    institutionId String
    insurancePolicy InsurancePolicy @relation(fields: [insurancePolicyId], references: [id])
    insurancePolicyId String
    beneficiaries Beneficiary[]

    @@index([institutionId, id])
    @@unique([institutionId, id])
}

/// @@allow('all', true && isPublished)
model Beneficiary {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    firstName String
    secondName String?
    thirdName String?
    fourthName String?
    lastName String
    searchName String
    birthDate DateTime
    gender Gender @relation(fields: [genderId], references: [id])
    genderId String
    nationality String?
    nationalID String?
    residence String?
    address String?
    isActive Boolean @default(true)
    deactivationReason String?
    subscriber Subscriber @relation(fields: [subscriberId], references: [id])
    subscriberId String
    legacyCode String?
    relationship Relationship @relation(fields: [relationshipId], references: [id])
    relationshipId String
    isFingerprintVerificationActive Boolean @default(false)
    isIdCardVerificationActive Boolean @default(false)
    isFaceVerificationActive Boolean @default(false)
    isVoiceVerificationActive Boolean @default(false)
    fingerprint FingerprintBiometric[]
    idCard IDCard[]
    face FaceBiometric[]
    voice VoiceBiometric[]
    entryRecords EntryRecord[]
    beneficiaryBalances BeneficiaryBalance[]

    @@index([subscriberId, id])
    @@unique([subscriberId, id])
}

/// @@allow('all', true && isPublished)
model Relationship {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    beneficiary Beneficiary[]
}

/// @@allow('all', true && isPublished)
model InstitutionMedicalService {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    institution Institution @relation(fields: [institutionId], references: [id])
    institutionId String
    medicalService MedicalService @relation(fields: [medicalServiceId], references: [id])
    medicalServiceId String
    basePrice Int

    @@index([institutionId, medicalServiceId])
    @@unique([institutionId, medicalServiceId])
}

/// @@allow('all', true && isPublished)
model FingerprintBiometric {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    fingerType FingerType @relation(fields: [fingerTypeId], references: [id])
    fingerTypeId String
    hash String @unique()
    beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
    beneficiaryId String
    entryRecords EntryRecord[]

    @@index([beneficiaryId, id])
    @@unique([beneficiaryId, id])
    @@index([id, fingerTypeId])
    @@unique([id, fingerTypeId])
}

/// @@allow('all', true && isPublished)
model IDCard {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    hash String @unique()
    beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
    beneficiaryId String
    entryRecords EntryRecord[]

    @@index([beneficiaryId, id])
    @@unique([beneficiaryId, id])
}

/// @@allow('all', true && isPublished)
model FaceBiometric {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    hash String @unique()
    beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
    beneficiaryId String
    entryRecords EntryRecord[]

    @@index([beneficiaryId, id])
    @@unique([beneficiaryId, id])
}

/// @@allow('all', true && isPublished)
model VoiceBiometric {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    hash String @unique()
    beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
    beneficiaryId String
    entryRecords EntryRecord[]

    @@index([beneficiaryId, id])
    @@unique([beneficiaryId, id])
}

/// @@allow('all', true && isPublished)
model FingerType {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    fingerType FingerprintBiometric[]
}

/// @@allow('all', true && isPublished)
model InsurancePolicy {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String @unique()
    Accumulatedlimit Int
    BalanceResetDate DateTime
    institution Institution @relation(fields: [institutionId], references: [id])
    institutionId String
    subscribers Subscriber[]
    issueDate DateTime
    renewalDate DateTime
    serviceEntryTimeWindow Int @default(24)
    benefitPackages BenefitPackage[]
    medicalCenters InsurancePolicyMedicalCenter[]
}

/// @@allow('all', true && isPublished)
model BenefitPackage {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String @unique()
    copayDistrubtion Int[]
    threashold Int[]
    medicalServiceTemplates BenefitPackageMedicalServiceTemplate[]
    insurancePolicy InsurancePolicy @relation(fields: [insurancePolicyId], references: [id])
    insurancePolicyId String
    beneficiaryBalances BeneficiaryBalance[]
}

/// @@allow('all', true && isPublished)
model InsurancePolicyMedicalCenter {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    insurancePolicyId String
    insurancePolicy InsurancePolicy @relation(fields: [insurancePolicyId], references: [id])
    medicalCenterId String
    medicalCenter MedicalCenter @relation(fields: [medicalCenterId], references: [id])

    @@unique([insurancePolicyId, medicalCenterId])
    @@index([insurancePolicyId, medicalCenterId])
}

/// @@allow('all', true && isPublished)
model MedicalCenter {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String
    code String
    description String
    cityHQ String
    address String?
    phone String[] @unique()
    email String[] @unique()
    /// @url
    website String
    /// @url
    facebookLink String
    /// @url
    googleMapsLink String
    /// @url
    twitterLink String
    /// @url
    instagramLink String
    latitude Float?
    longitude Float?
    managingTenant Tenant @relation(fields: [managingTenantId], references: [id])
    managingTenantId String @unique()
    services MedicalService[]
    insurancePolicy InsurancePolicyMedicalCenter[]
    entryRecords EntryRecord[]
}

/// @@allow('all', true && isPublished)
model BenefitPackageMedicalServiceTemplate {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    benefitPackage BenefitPackage @relation(fields: [benefitPackageId], references: [id])
    benefitPackageId String
    medicalServiceTemplate MedicalServiceTemplate @relation(fields: [medicalServiceTemplateId], references: [id])
    medicalServiceTemplateId String

    @@index([benefitPackageId, medicalServiceTemplateId])
    @@unique([benefitPackageId, medicalServiceTemplateId])
}

/// @@allow('all', true && isPublished)
model MedicalServiceTemplate {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String
    dalilCode String
    basePrice String
    IsPriceVaried Boolean @default(false)
    description String
    beneftiPackages BenefitPackageMedicalServiceTemplate[]
    services MedicalService[]
}

/// @@allow('all', true && isPublished)
model MedicalService {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    name String
    medicalCenterCode String
    basePrice Int
    medicalCenter MedicalCenter @relation(fields: [medicalCenterId], references: [id])
    medicalCenterId String
    patientServices PatientService[]
    institutionPricing InstitutionMedicalService[]
    template MedicalServiceTemplate @relation(fields: [templateId], references: [id])
    templateId String

    @@index([medicalCenterId, medicalCenterCode])
    @@unique([medicalCenterId, medicalCenterCode])
    @@index([templateId, medicalCenterId, medicalCenterCode])
    @@unique([templateId, medicalCenterId, medicalCenterCode])
}

/// @@allow('all', true && isPublished)
model EntryRecord {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
    beneficiaryId String
    fingerprintBiometric FingerprintBiometric? @relation(fields: [fingerprintId], references: [id])
    fingerprintId String?
    idCardBiometric IDCard? @relation(fields: [idCardId], references: [id])
    idCardId String?
    faceBiometric FaceBiometric? @relation(fields: [faceId], references: [id])
    faceId String?
    voiceBiometric VoiceBiometric? @relation(fields: [voiceId], references: [id])
    voiceId String?
    isValidated Boolean
    isManuallyInserted Boolean @default(false)
    patientServices PatientService[]
    medicalCenterId String
    medicalCenter MedicalCenter @relation(fields: [medicalCenterId], references: [id])
}

/// @@allow('all', true && isPublished)
model PatientService {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    isActive Boolean @default(true)
    deactivationReason String?
    entryRecord EntryRecord @relation(fields: [entryRecordId], references: [id])
    entryRecordId String
    name String
    Note String?
    isWorkInjury Boolean @default(false)
    isExamination Boolean @default(false)
    billedAmmount Int
    allowedAmmount Int
    copayAmmount Int
    cashAmount Int
    coveredAmount Int
    defferedAmount Int
    coinsuranceAmount Int
    transactionReviewStatus ReviewStatus @relation("transactionReviewStatus", fields: [transactionReviewStatusId], references: [id])
    transactionReviewStatusId String
    medicalReviewStatus ReviewStatus @relation("medicalReviewStatus", fields: [medicalReviewStatusId], references: [id])
    medicalReviewStatusId String
    medicalService MedicalService @relation(fields: [medicalServiceId], references: [id])
    medicalServiceId String
    groupCode String
}

/// @@allow('all', true && isPublished)
model ReviewStatus {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    arabic String?
    english String?
    name String @unique()
    transactionPatientServices PatientService[] @relation("transactionReviewStatus")
    medicalPatientServices PatientService[] @relation("medicalReviewStatus")
}

/// @@allow('all', true && isPublished)
model BeneficiaryBalance {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
    beneficiaryId String
    beneftiPackage BenefitPackage @relation(fields: [beneftiPackageId], references: [id])
    beneftiPackageId String
    balance Float

    @@index([beneficiaryId, beneftiPackageId])
    @@unique([beneficiaryId, beneftiPackageId])
}

/// @@allow('all', true && isPublished)
model DiagnosisAttachment {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
    name String
    link String
    size Int
    contentType String
    metadata Json
}

/// @@allow('all', true && isPublished)
model LabReportAttachment {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
}

/// @@allow('all', true && isPublished)
model PrescriptionAttachment {
    id String @id()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    isPublished Boolean @default(true)
    isSoftDeleted Boolean @default(false)
}